pipeline {
    agent {
        docker {
            image 'node:14' // Use the official Node.js Docker image
            args '-v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to use Docker commands
        }
    }

    environment {
        DOTENV = '.env'
    }

    stages {
        stage('Load Environment Variables') {
            steps {
                script {
                    // Load environment variables from .env file
                    def envVars = readProperties file: env.DOTENV
                    envVars.each { key, value -> 
                        env[key] = value
                    }

                    // Load credentials from Jenkins
                    withCredentials([
                        string(credentialsId: 'DOCKER_HUB_USERNAME', variable: 'DOCKER_HUB_USERNAME'),
                        string(credentialsId: 'DOCKER_HUB_PASSWORD', variable: 'DOCKER_HUB_PASSWORD'),
                        string(credentialsId: 'DOCKER_IMAGE', variable: 'DOCKER_IMAGE')
                    ]) {
                        // Explicitly set them as environment variables
                        env.DOCKER_HUB_USERNAME = DOCKER_HUB_USERNAME
                        env.DOCKER_HUB_PASSWORD = DOCKER_HUB_PASSWORD
                        env.DOCKER_IMAGE = DOCKER_IMAGE
                    }
                }
            }
        }
        stage('Check Environment Variables') {
            steps {
                script {
                    // Print the environment variables
                    echo "Environment Variables from .env file:"
                    def envVars = readProperties file: env.DOTENV
                    envVars.each { key, value ->
                        echo "${key} = ${env[key]}"
                    }

                    echo "Environment Variables from Jenkins Credentials:"
                    echo "DOCKER_HUB_USERNAME = ${env.DOCKER_HUB_USERNAME}"
                    echo "DOCKER_IMAGE = ${env.DOCKER_IMAGE}"
                    // Avoid printing sensitive information like passwords
                    // echo "DOCKER_HUB_PASSWORD = ${env.DOCKER_HUB_PASSWORD}"
                }
            }
        }
        stage('Checkout') {
            steps {
                // Checkout the code from the repository
                checkout scm
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub and push the image
                    sh '''
                    echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
                    docker push $DOCKER_IMAGE
                    '''
                }
            }
        }
        stage('Deploy to Local Machine') {
            steps {
                script {
                    // Deploy the Docker container on the local machine
                    sh '''
                    docker pull $DOCKER_IMAGE
                    docker stop $(docker ps -q --filter ancestor=$DOCKER_IMAGE) || true
                    docker run -d -p 80:3000 $DOCKER_IMAGE
                    '''
                }
            }
        }
    }
}
