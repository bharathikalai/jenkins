pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = credentials('dockerhub-credentials') // Credential ID for DockerHub username and password
        IMAGE_NAME = 'bharathikalai/jenkins:latest' // Replace with your image name
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm // This will check out your repository into Jenkins workspace
                sh 'ls -la'
                sh 'pwd'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    docker.build("${IMAGE_NAME}", "/var/lib/jenkins/workspace/docker/build_application_docker")
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKERHUB_USR', passwordVariable: 'DOCKERHUB_PSW')]) {
                        // Log in to Docker Hub using the credentials
                        sh 'echo $DOCKERHUB_PSW | docker login -u $DOCKERHUB_USR --password-stdin'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKERHUB_USR', passwordVariable: 'DOCKERHUB_PSW')]) {
                        // Push Docker image to Docker Hub
                        docker.withRegistry('https://index.docker.io/v2/', "${DOCKER_CREDENTIALS_ID}") {
                            docker.image("${IMAGE_NAME}").push()
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker images after build
            script {
                try {
                    docker.image("${IMAGE_NAME}").remove()
                } catch (Exception e) {
                    echo "Error during cleanup: ${e}"
                }
            }
        }
    }
}
