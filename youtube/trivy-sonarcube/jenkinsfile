pipeline {
    agent any
     

    environment {
        // Use uppercase for environment variables for better convention
        PROJECT_KEY = 'first-analysis'         // Replace with your project key
        PROJECT_NAME = 'first-analysis'        // Replace with your project name
        PROJECT_VERSION = '1.0'    
    }
    
    stages {
        stage('GitHub Clone') {
            steps {
                // Cloning the GitHub repository
                git branch: 'main', url: 'https://github.com/bharathikalai/Docker.git'
            }
        }

        stage('SonarQube Analysis') { // Renamed for clarity
            steps {
                withSonarQubeEnv('My SonarQube Server') { // Use the configured SonarQube server
                    sh '''
                    sonar-scanner \
                        -Dsonar.projectKey=${PROJECT_KEY} \
                        -Dsonar.projectName=${PROJECT_NAME} \
                        -Dsonar.projectVersion=${PROJECT_VERSION} \
                        -Dsonar.sources=. \
                    '''
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                dir('demo1') { // Ensure that 'dir' is used as a block
                    sh 'docker build -t first_pipeline:${BUILD_NUMBER} .'
                }
            }
        }

        stage('Trivy Scan') { // Renamed for clarity
            steps {
                script {
                    def reportFile = "trivy-report-${BUILD_NUMBER}.txt"
                    // Run the Trivy scan and save the output to the report file
                    sh "trivy image --severity HIGH,CRITICAL --output ${reportFile} first_pipeline:${BUILD_NUMBER}"
                    // Archive the report file
                    archiveArtifacts artifacts: reportFile, fingerprint: true
                }
            }
        }

        stage('Docker Hub') {
            steps {
                withDockerRegistry(credentialsId: 'dockerhublogin', url: 'https://index.docker.io/v1/') {
                    // Tag and push the Docker image to Docker Hub
                    sh 'docker tag first_pipeline:${BUILD_NUMBER} bharathikalai/first_pipeline:${BUILD_NUMBER}'
                    sh 'docker push bharathikalai/first_pipeline:${BUILD_NUMBER}'
                }
            }    
        }

        stage('Run Docker Container') { // Renamed for clarity
            steps {
                withDockerRegistry(credentialsId: 'dockerhublogin', url: 'https://index.docker.io/v1/') {
                    // Stop and remove the existing container, then run a new one
                    sh 'docker stop jenkins-container || true && docker rm jenkins-container || true'
                    sh 'docker pull bharathikalai/first_pipeline:${BUILD_NUMBER}'
                    sh 'docker run -d -p 7000:7000 --name jenkins-container bharathikalai/first_pipeline:${BUILD_NUMBER}'
                }
            }    
        }
    }
}
